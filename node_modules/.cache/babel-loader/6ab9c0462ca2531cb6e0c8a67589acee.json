{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\angel\\\\OneDrive\\\\Escritorio\\\\My Proyects\\\\Snake\\\\src\\\\App.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useInterval } from \"./useInterval\";\nimport { CANVAS_SIZE, SNAKE_START, COIN_START, SCALE, SPEED, DIRECTIONS } from \"./constants\";\nimport key from './keys.jpg';\n\nconst App = () => {\n  const canvasRef = useRef();\n  const [snake, setSnake] = useState(SNAKE_START);\n  const [coin, setCoin] = useState(COIN_START);\n  const [dir, setDir] = useState([0, -1]);\n  const [speed, setSpeed] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const [points, setPoints] = useState(0);\n  useInterval(() => gameLoop(), speed);\n\n  const endGame = () => {\n    setSpeed(null);\n    setGameOver(true);\n    setPoints(0);\n  };\n\n  const moveSnake = ({\n    keyCode\n  }) => keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]);\n\n  const createCoin = () => coin.map((_a, i) => Math.floor(Math.random() * (CANVAS_SIZE[i] / SCALE)));\n\n  const checkCollision = (piece, snk = snake) => {\n    if (piece[0] * SCALE >= CANVAS_SIZE[0] || piece[0] < 0 || piece[1] * SCALE >= CANVAS_SIZE[1] || piece[1] < 0) return true;\n\n    for (const segment of snk) {\n      if (piece[0] === segment[0] && piece[1] === segment[1]) return true;\n    }\n\n    return false;\n  };\n\n  const checkCoinCollision = newSnake => {\n    if (newSnake[0][0] === coin[0] && newSnake[0][1] === coin[1]) {\n      let newCoin = createCoin();\n\n      while (checkCollision(newCoin, newSnake)) {\n        newCoin = createCoin();\n      }\n\n      setCoin(newCoin);\n      setPoints(points + 1);\n      return true;\n    }\n\n    return false;\n  };\n\n  const gameLoop = () => {\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\n    const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1]];\n    snakeCopy.unshift(newSnakeHead);\n    if (checkCollision(newSnakeHead)) endGame();\n    if (!checkCoinCollision(snakeCopy)) snakeCopy.pop();\n    setSnake(snakeCopy);\n  };\n\n  const startGame = () => {\n    setSnake(SNAKE_START);\n    setCoin(COIN_START);\n    setDir([0, -1]);\n    setSpeed(SPEED);\n    setGameOver(false);\n  };\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\n    context.clearRect(0, 0, window.innerWidth, window.innerHeight);\n    context.fillStyle = \"#0af002\";\n    snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n    context.fillStyle = \"#e2f002\";\n    context.fillRect(coin[0], coin[1], 1, 1);\n  }, [snake, coin, gameOver]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: e => moveSnake(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    style: {\n      border: \"1px solid black\",\n      backgroundColor: \"#D3D3D3\"\n    },\n    ref: canvasRef,\n    width: `${CANVAS_SIZE[0]}px`,\n    height: `${CANVAS_SIZE[1]}px`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"img\", {\n    src: key,\n    alt: \"key\",\n    width: \"300px\",\n    height: \"300px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, \"You have to use the arrow keys to control the snake,catch the coins (yellow squares) to earn points, be careful of hitting the borders or your tail you might lose!\"), gameOver && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 20\n    }\n  }, \"GAME OVER!\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, \"Points: \", points), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, \"Start Game\"));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/angel/OneDrive/Escritorio/My Proyects/Snake/src/App.js"],"names":["React","useState","useRef","useEffect","useInterval","CANVAS_SIZE","SNAKE_START","COIN_START","SCALE","SPEED","DIRECTIONS","key","App","canvasRef","snake","setSnake","coin","setCoin","dir","setDir","speed","setSpeed","gameOver","setGameOver","points","setPoints","gameLoop","endGame","moveSnake","keyCode","createCoin","map","_a","i","Math","floor","random","checkCollision","piece","snk","segment","checkCoinCollision","newSnake","newCoin","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","pop","startGame","context","current","getContext","setTransform","clearRect","window","innerWidth","innerHeight","fillStyle","forEach","x","y","fillRect","e","border","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport { useInterval } from \"./useInterval\";\r\nimport {\r\n  CANVAS_SIZE,\r\n  SNAKE_START,\r\n  COIN_START,\r\n  SCALE,\r\n  SPEED,\r\n  DIRECTIONS\r\n} from \"./constants\";\r\nimport key from './keys.jpg';\r\n\r\nconst App = () => {\r\n  const canvasRef = useRef();\r\n  const [snake, setSnake] = useState(SNAKE_START);\r\n  const [coin, setCoin] = useState(COIN_START);\r\n  const [dir, setDir] = useState([0, -1]);\r\n  const [speed, setSpeed] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [points, setPoints] = useState(0);\r\n\r\n  useInterval(() => gameLoop(), speed);\r\n\r\n  const endGame = () => {\r\n    setSpeed(null);\r\n    setGameOver(true);\r\n    setPoints(0);\r\n  };\r\n\r\n  const moveSnake = ({ keyCode }) =>\r\n    keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]);\r\n\r\n  const createCoin = () =>\r\n    coin.map((_a, i) => Math.floor(Math.random() * (CANVAS_SIZE[i] / SCALE)));\r\n\r\n  const checkCollision = (piece, snk = snake) => {\r\n    if (\r\n      piece[0] * SCALE >= CANVAS_SIZE[0] ||\r\n      piece[0] < 0 ||\r\n      piece[1] * SCALE >= CANVAS_SIZE[1] ||\r\n      piece[1] < 0\r\n    )\r\n      return true;\r\n\r\n    for (const segment of snk) {\r\n      if (piece[0] === segment[0] && piece[1] === segment[1]) return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const checkCoinCollision = newSnake => {\r\n    if (newSnake[0][0] === coin[0] && newSnake[0][1] === coin[1]) {\r\n      let newCoin = createCoin();\r\n      while (checkCollision(newCoin, newSnake)) {\r\n        newCoin = createCoin();\r\n      }\r\n      setCoin(newCoin);\r\n      setPoints(points + 1);\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const gameLoop = () => {\r\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\r\n    const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1]];\r\n    snakeCopy.unshift(newSnakeHead);\r\n    if (checkCollision(newSnakeHead)) endGame();\r\n    if (!checkCoinCollision(snakeCopy)) snakeCopy.pop();\r\n    setSnake(snakeCopy);\r\n  };\r\n\r\n  const startGame = () => {\r\n    setSnake(SNAKE_START);\r\n    setCoin(COIN_START);\r\n    setDir([0, -1]);\r\n    setSpeed(SPEED);\r\n    setGameOver(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const context = canvasRef.current.getContext(\"2d\");\r\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\r\n    context.clearRect(0, 0, window.innerWidth, window.innerHeight);\r\n    context.fillStyle = \"#0af002\";\r\n    snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\r\n    context.fillStyle = \"#e2f002\";\r\n    context.fillRect(coin[0], coin[1], 1, 1);\r\n  }, [snake, coin, gameOver]);\r\n\r\n  return (\r\n    <div role=\"button\" tabIndex=\"0\" onKeyDown={e => moveSnake(e)}>\r\n      <canvas\r\n        style={{ border: \"1px solid black\", backgroundColor: \"#D3D3D3\" }}\r\n        ref={canvasRef}\r\n        width={`${CANVAS_SIZE[0]}px`}\r\n        height={`${CANVAS_SIZE[1]}px`}\r\n      />\r\n      <img src={key} alt='key' width='300px' height='300px'/>\r\n      <p>You have to use the arrow keys to control the snake,catch the coins (yellow squares) to earn points, be careful of hitting the borders or your tail you might lose!</p>\r\n      {gameOver && <div>GAME OVER!</div>}\r\n      <div>Points: {points}</div>\r\n      <button onClick={startGame}>Start Game</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}